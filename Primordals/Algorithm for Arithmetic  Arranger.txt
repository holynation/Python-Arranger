Algorithm for Arithmathic Arranger (CSC 231 Project)

00. START

01. Define a function with two arguments (One Required-Positional argument and one Optional Argument)
	# The first argument is a list of strings		- ('expressions')
	# The second is a boolean argument default to "False"	- ('result')

# Start of Body of the function

# Handling the First Error (Number of problems)
02. Check the length of the 'expressions' argument
	if the length is greater than 7
		return the string "Error: Too many problems", otherwise continu

03. Declare the variables
	line1 = ""
	line2 = ""
	line3 = ""
	line4 = ""	# String variables to hold each line of the arranged expression

04. Loop through each element inside the list variable 'expressions' (for or while loop)
	# 'exp' varaible to hold each element inside the loop at each iteration

# Start of Loop

05. Replace all spaces in the 'exp' variable (i.e each element in the 'expressions variable) with an empty string
	# Objective is to allow the function to work for the cases where the user inputs:
	1. "345 + 46"	# The user separate the expression with space OR
	2. "345+46"	# Not separating expression with spaces

# Handling the Second Error (Supported Operators)
06. Check if the string "+" is present in the 'exp' variable (Membership operation)
	06a. Split the characters in 'exp' using "+" as a delimiter and store in a variable (or same variable 'exp')
	06b. Store the string "+" in a variable ('operator')

07. Else if the string "-" is present in the 'exp' variable (Membership operation)
	07a. Split the characters in 'exp' using "-" as a delimiter and store in a variable (or same variable 'exp')
	07b. Store the string "-" in a variable ('operator')

08. Else
	return the string "Error: Operator must be '+' or '-'", otherwise continue

# By now, the 'exp' variable (or another variable defined in 06a and 07a above) must be a list containing two elements

# Handling the Third Error (Digits Only)
09. Check if any of the element in the 'exp' variable does not contain digits only (i.e contain numbers only)
	return the string "Error: Numbers must only contain digits", otherwise continue

# Handling the Fourth Error (Number of digits in expression)
10. Check if any of the element in 'exp' variable contains digits more than six
	return the string "Error: Numbers cannot be more than six digits", otherwise continue

# Evaluating the Expression

11. Check if the 'result' argument is True:
	# Operate the two elements in 'exp' using the operator stored in the operator 'variable', store the result (converted to string) in a variable 'res'

12. Else
	set the variable 'res' to empty string

# Arranging Expression, following all the rules

13. Out of the two elements in 'exp' and the 'res' variable, find out which has the maximum number of digits and store the number in a variable ('align')

14. Concatenate with line1 variable
	# The first element in 'exp' rightly-just by the number in 'align' variable (pre-padded with two whitespaces and post-padded with four whitespaces)
	line1 += "  " + exp[0].rjust(align) + "    "

15. Concatenate with line2 variable
	# The operator, a whitespace, the second element in 'exp' rightly-just by the number in 'align' variable (post-padded with four whitespaces)
	line2 += operator + " " + exp[0].rjust(align) + "    "

16. Concatenate with line3 variable
	# The "-" character multplied by ('align' + 2) (also post-padded with four whitespaces)
	line3 += ("-" * (align + 2)) + "    " 

17. Concatenate with line4 variable
	# The 'res' variable righty-just (pre-padded with two whitespace and post padded with four spaces)
	line4 += "  " + res.rjust(align) + "    "

# End of Loop

# Joining the arranged lines with the newline Character

18. arranged_string = line1 + "\n" + line2 + "\n" + line3

19. If the 'result' argument is True
	arrange_string += "\n" + 4, otherwise continue

20. arranged_string += "\n" + line3

21. return arrange_string

# End of Function body

22. STOP